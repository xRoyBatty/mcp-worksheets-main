This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-03T13:10:39.294Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
docs/
  assets/
    css/
      components/
        card.css
        filter.css
        footer.css
        header.css
        nav.css
        search.css
        worksheetCard.css
      tasks/
        base-task.css
        dictation.css
        fillBlanks.css
        matching.css
        multiChoice.css
      base.css
      components.css
      hub.css
      layout.css
      worksheet.css
    js/
      tasks/
        baseTask.js
        dictation.js
        fillBlanks.js
        matching.js
        multiChoice.js
      worksheetManager.js
  levels/
    index.json
  skills/
    index.json
  templates/
    tasks/
      dictation.html
      fillBlanks.html
      matching.html
      multiChoice.html
    meta.json
    worksheet.html
  worksheets/
    b1-past-vs-perfect/
      index.html
      meta.json
    b1-weather/
      index.html
      meta.json
    debug/
      index.html
      meta.json
    examples/
      basic/
        index.html
        meta.json
      minimal/
        index.html
        meta.json
    tests/
      css-test/
        index.html
        meta.json
      simple-css/
        index.html
  _config.yml
  index.html
README.md

================================================================
Repository Files
================================================================

================
File: docs/assets/css/components/card.css
================
/* Card component styles */
.card {
    background-color: var(--color-white);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-sm);
    padding: var(--spacing-lg);
    transition: transform var(--transition-base), box-shadow var(--transition-base);
}

.card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-md);
}

.card-title {
    color: var(--color-primary);
    margin-bottom: var(--spacing-md);
    font-size: var(--font-size-lg);
}

.card-meta {
    display: flex;
    gap: var(--spacing-sm);
    font-size: var(--font-size-sm);
    color: var(--color-secondary);
    margin-bottom: var(--spacing-md);
}

.card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-sm);
}

.tag {
    font-size: var(--font-size-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    background-color: var(--color-light);
    border-radius: var(--radius-sm);
    color: var(--color-secondary);
}

================
File: docs/assets/css/components/filter.css
================
/* Filter component styles */
.filter-group {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
    margin: var(--spacing-md) 0;
    flex-wrap: wrap;
}

.filter-button {
    composes: btn btn-outline;
}

================
File: docs/assets/css/components/footer.css
================
/* Footer component styles */
.site-footer {
    padding: 2rem 1rem;
    background: var(--color-background);
    border-top: 1px solid var(--color-border);
    margin-top: 2rem;
}

.footer-content {
    max-width: var(--max-width);
    margin: 0 auto;
    text-align: center;
}

.footer-nav {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 1rem;
}

.footer-nav a {
    text-decoration: none;
    color: var(--color-text);
}

.footer-nav a:hover {
    color: var(--color-primary);
}

================
File: docs/assets/css/components/header.css
================
/* Header component styles */
.site-header {
    padding: 2rem 1rem;
    background: var(--color-background);
    border-bottom: 1px solid var(--color-border);
}

.site-header h1 {
    text-align: center;
    color: var(--color-primary);
    margin-bottom: 1.5rem;
}

/* Navigation elements */
.site-nav {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
}

.site-nav a {
    text-decoration: none;
    color: var(--color-text);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.site-nav a:hover,
.site-nav a.active {
    background-color: var(--color-primary);
    color: white;
}

================
File: docs/assets/css/components/nav.css
================
/* Navigation bar styles */
.worksheet-nav {
    position: sticky;
    top: 0;
    z-index: 100;
    background: white;
    border-bottom: 1px solid var(--color-border);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Home link */
.nav-home {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    color: var(--color-text);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.nav-home:hover {
    background-color: var(--color-background);
    color: var(--color-primary);
}

.nav-home svg {
    transition: transform 0.3s ease;
}

.nav-home:hover svg {
    transform: translateX(-2px);
}

/* Progress bar */
.nav-progress {
    flex: 1;
    max-width: 400px;
    margin: 0 2rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.progress-bar {
    height: 6px;
    background-color: var(--color-background);
    border-radius: 3px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background-color: var(--color-primary);
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 0.875rem;
    color: var(--color-text-light);
    text-align: center;
}

/* Level indicator */
.nav-level {
    padding: 0.5rem 1rem;
    background-color: var(--color-background);
    border-radius: 4px;
    font-weight: 500;
    color: var(--color-text);
}

/* Responsive design */
@media (max-width: 768px) {
    .nav-container {
        flex-direction: column;
        gap: 1rem;
        padding: 0.5rem;
    }

    .nav-progress {
        margin: 0;
        width: 100%;
        max-width: none;
    }

    .nav-home {
        width: 100%;
        justify-content: center;
    }

    .nav-level {
        width: 100%;
        text-align: center;
    }
}

================
File: docs/assets/css/components/search.css
================
/* Search component styles */
.search-container {
    max-width: 500px;
    margin: var(--spacing-lg) auto;
}

.search-input {
    width: 100%;
    padding: var(--spacing-sm);
    font-size: var(--font-size-base);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-sm);
    transition: border-color var(--transition-base);
}

.search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

================
File: docs/assets/css/components/worksheetCard.css
================
/* Worksheet card component styles */
.worksheet-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 1.5rem;
    transition: transform 0.3s, box-shadow 0.3s;
}

.worksheet-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.worksheet-card h2 {
    color: var(--color-primary);
    margin-bottom: 1rem;
}

.worksheet-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--color-text-light);
}

.worksheet-description {
    margin-bottom: 1rem;
    line-height: 1.5;
}

.worksheet-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.worksheet-tag {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    background: var(--color-background);
    border-radius: 4px;
    color: var(--color-text-light);
}

================
File: docs/assets/css/tasks/base-task.css
================
/* Base styles for all task types */

:root {
    /* Task-specific colors */
    --task-border-color: var(--color-border);
    --task-background: var(--color-white);
    --task-text: var(--color-dark);
    --task-text-light: var(--color-secondary);
    
    /* Task dimensions */
    --task-spacing: var(--spacing-md);
    --task-border-radius: var(--radius-md);
    --task-padding: var(--spacing-lg);
}

/* Common task container */
.task-container {
    background: var(--task-background);
    border: 1px solid var(--task-border-color);
    border-radius: var(--task-border-radius);
    padding: var(--task-padding);
    margin-bottom: var(--spacing-lg);
}

/* Task instructions */
.task-instructions {
    margin-bottom: var(--spacing-lg);
    line-height: var(--line-height-base);
    color: var(--task-text);
    position: relative;
    padding-right: 2.5rem; /* Space for speak button */
}

/* Task content */
.task-content {
    margin-bottom: var(--spacing-md);
    position: relative;
}

/* Speak button */
.speak-button {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary);
    opacity: 0.7;
    transition: opacity var(--transition-base);
    border-radius: var(--radius-sm);
}

.speak-button:hover {
    opacity: 1;
}

.speak-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-primary);
}

/* Common task item styles */
.task-item {
    border: 2px solid var(--task-border-color);
    border-radius: var(--radius-sm);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-sm);
    background: var(--task-background);
    transition: all var(--transition-base);
}

/* Common animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateX(-10px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Task states */
.task-item.correct {
    border-color: var(--color-success);
    background-color: rgba(40, 167, 69, 0.1);
}

.task-item.incorrect {
    border-color: var(--color-danger);
    background-color: rgba(220, 53, 69, 0.1);
}

.task-item.partial {
    border-color: var(--color-warning);
    background-color: rgba(255, 193, 7, 0.1);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .task-container {
        padding: var(--spacing-md);
    }
    
    .task-item {
        padding: var(--spacing-sm);
    }
}

================
File: docs/assets/css/tasks/dictation.css
================
/* Dictation Task Styles */
.dictation .controls {
    margin-bottom: 1rem;
    display: flex;
    gap: 1rem;
    align-items: center;
}

.dictation .play-btn {
    padding: 0.5rem 1rem;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.dictation .play-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
}

.dictation .speed-btn {
    padding: 0.25rem 0.5rem;
    border: 1px solid #ddd;
    background: white;
    border-radius: 4px;
    cursor: pointer;
}

.dictation .speed-btn.active {
    background: #e6f3ff;
    border-color: #0066cc;
    color: #0066cc;
}

.dictation .attempts {
    color: #666;
    font-size: 0.9rem;
}

.dictation textarea {
    width: 100%;
    min-height: 100px;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
    font-family: inherit;
    line-height: 1.5;
}

.dictation textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0,102,204,0.2);
}

/* States */
.dictation textarea.correct {
    border-color: #28a745;
    background: #d4edda;
}

.dictation textarea.incorrect {
    border-color: #dc3545;
    background: #f8d7da;
}

================
File: docs/assets/css/tasks/fillBlanks.css
================
/* Fill in the Blanks Styles */
.fill-blanks .content {
    line-height: 2;
}

.fill-blanks input {
    width: 120px;
    padding: 4px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin: 0 4px;
}

.fill-blanks input:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0,102,204,0.2);
}

/* States */
.fill-blanks input.correct {
    border-color: #28a745;
    background: #d4edda;
}

.fill-blanks input.incorrect {
    border-color: #dc3545;
    background: #f8d7da;
}

================
File: docs/assets/css/tasks/matching.css
================
/* Matching Task Styles */
.matching .pairs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 1rem;
}

.matching .item {
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    background: white;
    transition: all 0.2s ease;
}

.matching .item:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
}

.matching .item.selected {
    border-color: #0066cc;
    background: #e6f3ff;
}

.matching .item.correct {
    border-color: #28a745;
    background: #d4edda;
}

.matching .item.incorrect {
    border-color: #dc3545;
    background: #f8d7da;
}

/* Connection line */
.matching .connection {
    stroke: #0066cc;
    stroke-width: 2;
    stroke-linecap: round;
}

.matching .connection.correct {
    stroke: #28a745;
}

.matching .connection.incorrect {
    stroke: #dc3545;
}

@media (max-width: 600px) {
    .matching .pairs {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
}

================
File: docs/assets/css/tasks/multiChoice.css
================
/* Multiple Choice Specific Styles */
.multiple-choice .question {
    margin-bottom: 2rem;
}

.multiple-choice .question p {
    font-size: 1.1rem;
    margin-bottom: 1rem;
}

.multiple-choice .options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.multiple-choice .options label {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.multiple-choice .options label:hover {
    background: #f8f9fa;
}

.multiple-choice .options input[type="radio"] {
    margin-right: 1rem;
}

/* States */
.multiple-choice .options label.correct {
    border-color: #28a745;
    background: #d4edda;
}

.multiple-choice .options label.incorrect {
    border-color: #dc3545;
    background: #f8d7da;
}

/* Animation */
.multiple-choice .options label {
    transform: translateX(0);
    transition: transform 0.2s ease;
}

.multiple-choice .options label:hover {
    transform: translateX(5px);
}

================
File: docs/assets/css/base.css
================
:root {
    /* Colors */
    --color-primary: #007bff;
    --color-secondary: #6c757d;
    --color-success: #28a745;
    --color-danger: #dc3545;
    --color-warning: #ffc107;
    --color-info: #17a2b8;
    --color-light: #f8f9fa;
    --color-dark: #343a40;
    --color-white: #ffffff;
    --color-border: #dee2e6;
    
    /* Typography */
    --font-family-base: 'Arial', sans-serif;
    --font-size-base: 1rem;
    --font-size-lg: 1.25rem;
    --font-size-sm: 0.875rem;
    --font-size-xs: 0.75rem;
    --line-height-base: 1.6;
    
    /* Spacing */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    
    /* Border radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;
    
    /* Transitions */
    --transition-fast: 0.2s;
    --transition-base: 0.3s;
    
    /* Shadows */
    --shadow-sm: 0 2px 4px rgba(0,0,0,0.1);
    --shadow-md: 0 4px 8px rgba(0,0,0,0.1);
    --shadow-lg: 0 8px 16px rgba(0,0,0,0.1);
    
    /* Z-index layers */
    --z-dropdown: 1000;
    --z-sticky: 1020;
    --z-modal: 1030;
    --z-tooltip: 1040;
}

/* Reset and base styles */
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: var(--font-family-base);
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    color: var(--color-dark);
    background-color: var(--color-light);
}

/* Common utility classes */
.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
}

/* Base button styles */
.btn {
    display: inline-block;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 2px solid transparent;
    border-radius: var(--radius-sm);
    font-size: var(--font-size-base);
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    transition: all var(--transition-base);
}

.btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

.btn-primary {
    background-color: var(--color-primary);
    color: var(--color-white);
}

.btn-outline {
    background-color: transparent;
    border-color: var(--color-primary);
    color: var(--color-primary);
}

.btn-outline:hover,
.btn-outline.active {
    background-color: var(--color-primary);
    color: var(--color-white);
}

================
File: docs/assets/css/components.css
================
/* Master component imports */
@import 'components/card.css';
@import 'components/filter.css';
@import 'components/search.css';
@import 'components/header.css';
@import 'components/footer.css';

================
File: docs/assets/css/hub.css
================
/* Hub-specific styles */

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

/* Header styles */
.site-header {
    text-align: center;
    margin-bottom: 3rem;
}

.site-header h1 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
}

/* Filter styles */
.level-filter,
.skill-filter {
    margin: 1rem 0;
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.level-filter button,
.skill-filter button {
    padding: 0.5rem 1rem;
    border: 2px solid var(--color-primary);
    background: transparent;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s;
}

.level-filter button:hover,
.skill-filter button:hover,
.level-filter button.active,
.skill-filter button.active {
    background: var(--color-primary);
    color: white;
}

/* Search styles */
.search {
    margin: 2rem 0;
}

.search input {
    width: 100%;
    max-width: 500px;
    padding: 0.75rem;
    border: 2px solid var(--color-border);
    border-radius: 4px;
    font-size: 1rem;
}

.search input:focus {
    outline: none;
    border-color: var(--color-primary);
}

/* Worksheet grid */
.worksheet-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
}

/* Worksheet card */
.worksheet-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    text-decoration: none;
    color: inherit;
    transition: transform 0.3s, box-shadow 0.3s;
}

.worksheet-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.worksheet-card h2 {
    margin-bottom: 1rem;
    color: var(--color-primary);
}

.worksheet-card .meta {
    display: flex;
    gap: 1rem;
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 1rem;
}

.worksheet-card .description {
    margin-bottom: 1rem;
    line-height: 1.5;
}

.worksheet-card .task-types {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.worksheet-card .task-type {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    background: #f0f0f0;
    border-radius: 4px;
}

/* Responsive design */
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }

    .site-header h1 {
        font-size: 2rem;
    }

    .worksheet-grid {
        grid-template-columns: 1fr;
    }
}

================
File: docs/assets/css/layout.css
================
/* Layout system */
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--spacing-md);
}

.grid {
    display: grid;
    gap: var(--spacing-md);
}

@media (min-width: 768px) {
    .grid {
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
}

.flex {
    display: flex;
    gap: var(--spacing-md);
}

.flex-center {
    justify-content: center;
    align-items: center;
}

.flex-wrap {
    flex-wrap: wrap;
}

/* Progress tracking */
.progress {
    width: 100%;
    height: 20px;
    background-color: var(--color-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background-color: var(--color-primary);
    transition: width var(--transition-base);
}

================
File: docs/assets/css/worksheet.css
================
/* Base reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background: #f8f9fa;
}

/* Navigation */
.nav {
    background: white;
    padding: 1rem;
    border-bottom: 1px solid #ddd;
    display: flex;
    align-items: center;
    gap: 2rem;
}

.back-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #0066cc;
    color: #0066cc;
    text-decoration: none;
    border-radius: 4px;
}

.progress {
    flex: 1;
    background: #eee;
    height: 20px;
    border-radius: 10px;
    overflow: hidden;
}

.progress-bar {
    width: 0%;
    height: 100%;
    background: #0066cc;
    transition: width 0.3s ease;
}

/* Worksheet Layout */
.worksheet {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.header {
    margin-bottom: 2rem;
    text-align: center;
}

.meta {
    color: #666;
    margin-top: 0.5rem;
}

.meta span {
    margin: 0 1rem;
}

/* Common Task Styles */
.task {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.task h2 {
    margin-bottom: 1rem;
    color: #0066cc;
}

.instructions {
    color: #666;
    margin-bottom: 1.5rem;
    font-style: italic;
}

/* Footer */
.footer {
    margin-top: 3rem;
    text-align: center;
}

.footer button {
    padding: 0.75rem 1.5rem;
    margin: 0 0.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#check {
    background: #0066cc;
    color: white;
}

#retry {
    background: #eee;
    color: #333;
}

/* Responsive */
@media (max-width: 600px) {
    .nav {
        flex-direction: column;
        gap: 1rem;
    }
    
    .task {
        padding: 1rem;
    }
}

================
File: docs/assets/js/tasks/baseTask.js
================
export default class BaseTask {
    constructor(element) {
        this.element = element;
        this.setupVoice();
    }

    setupVoice() {
        if ('speechSynthesis' in window) {
            // Find instructions
            const instructions = this.element.querySelector('.instructions');
            if (instructions) {
                const btn = document.createElement('button');
                btn.className = 'voice-btn';
                btn.innerHTML = '🔊';
                btn.addEventListener('click', () => this.speak(instructions.textContent));
                instructions.parentNode.insertBefore(btn, instructions.nextSibling);
            }

            // Initialize voice selector if not done
            this.initVoiceSelector();
        }
    }

    initVoiceSelector() {
        const selector = document.getElementById('globalVoice');
        if (!selector || selector.children.length > 0) return;

        const loadVoices = () => {
            const voices = speechSynthesis.getVoices();
            selector.innerHTML = voices
                .filter(v => v.lang.startsWith('en'))
                .map(v => `<option value="${v.name}">${v.name}</option>`)
                .join('');
        };

        speechSynthesis.addEventListener('voiceschanged', loadVoices);
        loadVoices();
    }

    speak(text) {
        if (!text || speechSynthesis.speaking) return;

        const utterance = new SpeechSynthesisUtterance(text);
        const selector = document.getElementById('globalVoice');
        if (selector && selector.value) {
            const voice = speechSynthesis.getVoices()
                .find(v => v.name === selector.value);
            if (voice) utterance.voice = voice;
        }

        speechSynthesis.speak(utterance);
    }

    async check() {
        throw new Error('check() must be implemented by task class');
    }

    reset() {
        throw new Error('reset() must be implemented by task class');
    }

    // Utility methods
    setState(element, state) {
        element.classList.remove('correct', 'incorrect', 'partial');
        if (state) element.classList.add(state);
    }
}

================
File: docs/assets/js/tasks/dictation.js
================
import BaseTask from './baseTask.js';

export default class Dictation extends BaseTask {
    constructor(element) {
        super(element);
        this.textarea = element.querySelector('textarea');
        this.text = this.textarea?.dataset.text || '';
        this.maxAttempts = parseInt(this.textarea?.dataset.maxAttempts || '3', 10);
        this.attempts = this.maxAttempts;
        this.currentSpeed = 1;

        // Setup play button
        this.playBtn = element.querySelector('.play-btn');
        if (this.playBtn) {
            this.playBtn.addEventListener('click', () => this.play());
        }

        // Setup speed buttons
        element.querySelectorAll('.speed-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                element.querySelectorAll('.speed-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.currentSpeed = parseFloat(btn.dataset.speed);
            });
        });

        // Update attempts display
        this.updateAttempts();
    }

    updateAttempts() {
        const attemptsDisplay = this.element.querySelector('.attempts');
        if (attemptsDisplay) {
            attemptsDisplay.textContent = `Plays left: ${this.attempts}`;
        }

        if (this.playBtn) {
            if (this.attempts > 0) {
                this.playBtn.removeAttribute('disabled');
            } else {
                this.playBtn.setAttribute('disabled', 'true');
            }
        }
    }

    play() {
        if (this.attempts <= 0 || !this.text) return;

        // Create utterance
        const utterance = new SpeechSynthesisUtterance(this.text);
        
        // Set voice from global selector
        const selector = document.getElementById('globalVoice');
        if (selector && selector.value) {
            const voice = speechSynthesis.getVoices()
                .find(v => v.name === selector.value);
            if (voice) utterance.voice = voice;
        }

        // Set speed
        utterance.rate = this.currentSpeed;

        // Play audio
        speechSynthesis.speak(utterance);

        // Update attempts
        this.attempts--;
        this.updateAttempts();
    }

    async check() {
        if (!this.textarea || !this.text) return { correct: 0, total: 1 };

        const userText = this.textarea.value.trim().toLowerCase();
        const correctText = this.text.toLowerCase();

        // Calculate similarity
        const isCorrect = userText === correctText;
        const isPartial = !isCorrect && correctText.includes(userText);

        // Show feedback
        this.setState(this.textarea, isCorrect ? 'correct' : isPartial ? 'partial' : 'incorrect');

        // Show correct answer if wrong
        if (!isCorrect) {
            this.textarea.title = `Correct text: ${this.text}`;
        }

        return {
            correct: isCorrect ? 1 : 0,
            total: 1
        };
    }

    reset() {
        if (this.textarea) {
            this.textarea.value = '';
            this.textarea.title = '';
            this.setState(this.textarea, '');
        }
        this.attempts = this.maxAttempts;
        this.updateAttempts();
    }
}

================
File: docs/assets/js/tasks/fillBlanks.js
================
import BaseTask from './baseTask.js';

export default class FillBlanks extends BaseTask {
    constructor(element) {
        super(element);
        this.inputs = element.querySelectorAll('input[type="text"]');
        this.setupInputHandling();
    }

    setupInputHandling() {
        this.inputs.forEach(input => {
            // Clean value on focus
            input.addEventListener('focus', () => {
                this.setState(input, '');
            });

            // Handle Enter key to move to next input
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const nextInput = Array.from(this.inputs)
                        .find(inp => !inp.value && inp !== input);
                    if (nextInput) nextInput.focus();
                }
            });
        });
    }

    async check() {
        let correct = 0;
        const total = this.inputs.length;

        this.inputs.forEach(input => {
            const expectedAnswer = input.dataset.correct;
            const userAnswer = input.value.trim().toLowerCase();
            const isCorrect = userAnswer === expectedAnswer.toLowerCase();

            // Show correct/incorrect state
            this.setState(input, isCorrect ? 'correct' : 'incorrect');

            // Show correct answer for incorrect responses
            if (!isCorrect) {
                input.title = `Correct answer: ${expectedAnswer}`;
            }

            if (isCorrect) correct++;
        });

        return { correct, total };
    }

    reset() {
        this.inputs.forEach(input => {
            input.value = '';
            input.title = '';
            this.setState(input, '');
        });
    }
}

================
File: docs/assets/js/tasks/matching.js
================
import BaseTask from './baseTask.js';

export default class Matching extends BaseTask {
    constructor(element) {
        super(element);
        this.pairs = element.querySelector('.pairs');
        this.items = element.querySelectorAll('.item');
        this.selected = null;
        this.connections = [];
        this.setupSVG();
        this.setupEvents();
    }

    setupSVG() {
        // Create SVG overlay for lines
        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.svg.style.position = 'absolute';
        this.svg.style.top = '0';
        this.svg.style.left = '0';
        this.svg.style.width = '100%';
        this.svg.style.height = '100%';
        this.svg.style.pointerEvents = 'none';
        this.pairs.style.position = 'relative';
        this.pairs.insertBefore(this.svg, this.pairs.firstChild);
        
        // Update SVG size on window resize
        window.addEventListener('resize', () => this.updateLines());
    }

    setupEvents() {
        this.items.forEach(item => {
            item.addEventListener('click', () => this.handleClick(item));
            
            // Keyboard navigation
            item.setAttribute('tabindex', '0');
            item.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.handleClick(item);
                }
            });
        });
    }

    handleClick(item) {
        if (!this.selected) {
            // First item selected
            this.selected = item;
            item.classList.add('selected');
        } else if (this.selected === item) {
            // Deselect if same item
            this.selected.classList.remove('selected');
            this.selected = null;
        } else {
            // Try to make a connection
            const pair1 = this.selected.dataset.pair;
            const pair2 = item.dataset.pair;
            
            if (pair1 === pair2) {
                // Valid match
                this.connections.push({
                    from: this.selected,
                    to: item,
                    correct: true
                });
                this.selected.classList.remove('selected');
                this.drawLines();
            } else {
                // Invalid match - show feedback
                this.selected.classList.add('incorrect');
                item.classList.add('incorrect');
                setTimeout(() => {
                    this.selected.classList.remove('incorrect', 'selected');
                    item.classList.remove('incorrect');
                }, 1000);
            }
            this.selected = null;
        }
    }

    drawLines() {
        // Clear existing lines
        this.svg.innerHTML = '';
        
        // Draw new lines
        this.connections.forEach(conn => {
            const rect1 = conn.from.getBoundingClientRect();
            const rect2 = conn.to.getBoundingClientRect();
            const pairsRect = this.pairs.getBoundingClientRect();

            const x1 = rect1.right - pairsRect.left;
            const y1 = rect1.top + rect1.height/2 - pairsRect.top;
            const x2 = rect2.left - pairsRect.left;
            const y2 = rect2.top + rect2.height/2 - pairsRect.top;

            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', x1);
            line.setAttribute('y1', y1);
            line.setAttribute('x2', x2);
            line.setAttribute('y2', y2);
            line.setAttribute('stroke', conn.correct ? '#28a745' : '#dc3545');
            line.setAttribute('stroke-width', '2');
            this.svg.appendChild(line);
        });
    }

    updateLines() {
        // Update SVG size
        const rect = this.pairs.getBoundingClientRect();
        this.svg.setAttribute('width', rect.width);
        this.svg.setAttribute('height', rect.height);
        this.drawLines();
    }

    async check() {
        let correct = 0;
        const totalPairs = Array.from(this.items).filter(item => 
            item.closest('.left') !== null
        ).length;

        // Check each connection
        this.connections.forEach(conn => {
            if (conn.correct) correct++;
        });

        // Show feedback for unmatched items
        this.items.forEach(item => {
            const isMatched = this.connections.some(conn => 
                conn.from === item || conn.to === item
            );
            if (!isMatched) {
                item.classList.add('incorrect');
                setTimeout(() => item.classList.remove('incorrect'), 2000);
            }
        });

        return { correct, total: totalPairs };
    }

    reset() {
        // Clear all states and connections
        this.connections = [];
        this.selected = null;
        this.items.forEach(item => {
            item.classList.remove('selected', 'correct', 'incorrect');
        });
        this.svg.innerHTML = '';
    }
}

================
File: docs/assets/js/tasks/multiChoice.js
================
import BaseTask from './baseTask.js';

export default class MultipleChoice extends BaseTask {
    constructor(element) {
        super(element);
        this.questions = element.querySelectorAll('.question');
    }

    async check() {
        let correct = 0;
        const total = this.questions.length;

        this.questions.forEach(question => {
            const selected = question.querySelector('input:checked');
            if (selected) {
                const isCorrect = selected.dataset.correct === 'true';
                this.setState(selected.parentElement, isCorrect ? 'correct' : 'incorrect');
                if (isCorrect) correct++;
            }
        });

        return { correct, total };
    }

    reset() {
        this.questions.forEach(question => {
            const options = question.querySelectorAll('.option');
            options.forEach(option => {
                option.classList.remove('correct', 'incorrect');
                option.querySelector('input').checked = false;
            });
        });
    }
}

================
File: docs/assets/js/worksheetManager.js
================
export class WorksheetManager {
    constructor() {
        this.tasks = new Map();
        this.init();
    }

    async init() {
        // Find progress elements
        this.progressBar = document.querySelector('.progress-bar');
        this.progressText = document.querySelector('.progress-text');

        // Load tasks
        const taskElements = document.querySelectorAll('.task');
        for (const element of taskElements) {
            const taskType = element.classList[1];  // multiple-choice, fill-blanks, etc.
            try {
                const TaskModule = await import(`./tasks/${taskType}.js`);
                const task = new TaskModule.default(element);
                this.tasks.set(taskType, task);
            } catch (error) {
                console.error(`Failed to load task: ${taskType}`, error);
            }
        }

        // Setup buttons
        document.getElementById('check')?.addEventListener('click', () => this.checkAnswers());
        document.getElementById('retry')?.addEventListener('click', () => this.reset());

        // Load saved progress
        this.loadProgress();
    }

    async checkAnswers() {
        let totalCorrect = 0;
        let totalQuestions = 0;

        // Check each task
        for (const task of this.tasks.values()) {
            const result = await task.check();
            if (result.total) {
                totalCorrect += result.correct;
                totalQuestions += result.total;
            }
        }

        // Update progress
        const progress = Math.round((totalCorrect / totalQuestions) * 100);
        this.updateProgress(progress);
        this.saveProgress(progress);

        // Show feedback
        this.showFeedback(progress === 100);
    }

    updateProgress(percentage) {
        if (this.progressBar) {
            this.progressBar.style.width = `${percentage}%`;
        }
        if (this.progressText) {
            this.progressText.textContent = `${percentage}% Complete`;
        }
    }

    showFeedback(allCorrect) {
        const feedback = document.createElement('div');
        feedback.className = `feedback ${allCorrect ? 'correct' : 'incorrect'}`;
        feedback.textContent = allCorrect ? 
            'Great job! All answers are correct!' : 
            'Some answers need correction. Try again!';

        document.body.appendChild(feedback);
        setTimeout(() => feedback.remove(), 3000);
    }

    saveProgress(percentage) {
        const id = location.pathname.split('/').slice(-2)[0];
        localStorage.setItem(`progress_${id}`, percentage);
    }

    loadProgress() {
        const id = location.pathname.split('/').slice(-2)[0];
        const saved = localStorage.getItem(`progress_${id}`);
        if (saved) {
            this.updateProgress(parseInt(saved, 10));
        }
    }

    reset() {
        for (const task of this.tasks.values()) {
            task.reset();
        }
        this.updateProgress(0);
        const id = location.pathname.split('/').slice(-2)[0];
        localStorage.removeItem(`progress_${id}`);
    }
}

// Initialize on load
document.addEventListener('DOMContentLoaded', () => {
    window.worksheetManager = new WorksheetManager();
});

================
File: docs/levels/index.json
================
{
    "levels": [
        {
            "id": "a1",
            "name": "A1 Beginner",
            "description": "Basic English communication"
        },
        {
            "id": "a2",
            "name": "A2 Elementary",
            "description": "Elementary English skills"
        },
        {
            "id": "b1",
            "name": "B1 Intermediate",
            "description": "Independent English use"
        },
        {
            "id": "b2",
            "name": "B2 Upper Intermediate",
            "description": "Fluent English in most situations"
        },
        {
            "id": "c1",
            "name": "C1 Advanced",
            "description": "Advanced English mastery"
        }
    ]
}

================
File: docs/skills/index.json
================
{
    "skills": [
        {
            "id": "reading",
            "name": "Reading",
            "description": "Reading comprehension exercises"
        },
        {
            "id": "writing",
            "name": "Writing",
            "description": "Writing practice activities"
        },
        {
            "id": "listening",
            "name": "Listening",
            "description": "Audio-based exercises"
        },
        {
            "id": "speaking",
            "name": "Speaking",
            "description": "Speaking practice activities"
        },
        {
            "id": "grammar",
            "name": "Grammar",
            "description": "Grammar exercises and practice"
        },
        {
            "id": "vocabulary",
            "name": "Vocabulary",
            "description": "Vocabulary building activities"
        }
    ]
}

================
File: docs/templates/tasks/dictation.html
================
<!-- Dictation Task Template -->
<section class="task dictation" data-task-type="dictation" aria-labelledby="{TASK_ID}-title">
    <h2 id="{TASK_ID}-title" class="task-title">{TITLE}</h2>
    <div class="task-instructions">{INSTRUCTIONS}</div>

    <div class="task-content">
        <div class="passage" 
             data-text="{DICTATION_TEXT}" 
             data-max-attempts="{MAX_ATTEMPTS}">
            
            <div class="audio-controls">
                <button type="button" 
                        class="play-button" 
                        aria-label="Play dictation">
                    <svg xmlns="http://www.w3.org/2000/svg" 
                         width="24" 
                         height="24" 
                         viewBox="0 0 24 24" 
                         fill="none" 
                         stroke="currentColor" 
                         stroke-width="2" 
                         stroke-linecap="round" 
                         stroke-linejoin="round" 
                         aria-hidden="true">
                        <polygon points="5 3 19 12 5 21 5 3"></polygon>
                    </svg>
                </button>

                <div class="controls-info">
                    <div class="playback-count">
                        Remaining plays: <span class="count">{MAX_ATTEMPTS}</span>
                    </div>
                    
                    <div class="speed-control" role="group" aria-label="Playback speed">
                        <button type="button" 
                                class="speed-button" 
                                data-speed="0.75" 
                                aria-label="Slow speed">
                            0.75x
                        </button>
                        <button type="button" 
                                class="speed-button active" 
                                data-speed="1" 
                                aria-label="Normal speed">
                            1x
                        </button>
                    </div>
                </div>
            </div>

            <div class="input-area">
                <label for="{TASK_ID}-input" class="visually-hidden">
                    Type the dictation text here
                </label>
                <textarea id="{TASK_ID}-input" 
                          class="dictation-input"
                          rows="4"
                          placeholder="Type what you hear..."
                          aria-describedby="{TASK_ID}-help"></textarea>
            </div>

            <div id="{TASK_ID}-help" class="help-text">
                Listen to the audio and type exactly what you hear. 
                You can play the audio up to {MAX_ATTEMPTS} times.
            </div>

            <div class="feedback-area" aria-live="polite"></div>
        </div>
    </div>
</section>

<!-- Template Variables:
{TASK_ID} - Unique identifier for the task
{TITLE} - Task title
{INSTRUCTIONS} - Task instructions
{DICTATION_TEXT} - The correct text to be dictated
{MAX_ATTEMPTS} - Maximum number of times the audio can be played
-->

================
File: docs/templates/tasks/fillBlanks.html
================
<!-- Fill in the Blanks Task Template -->
<section class="task fill-blanks" data-task-type="fillBlanks" aria-labelledby="{TASK_ID}-title">
    <h2 id="{TASK_ID}-title" class="task-title">{TITLE}</h2>
    <div class="task-instructions">{INSTRUCTIONS}</div>

    <div class="task-content">
        <!-- Sentence Template (repeat for each sentence) -->
        <div class="sentence" data-index="{INDEX}">
            <span class="sentence-text">{BEFORE_BLANK}</span>
            <input type="text" 
                   class="blank-input" 
                   data-correct="{CORRECT_ANSWER}" 
                   data-index="{INDEX}"
                   aria-label="Fill in the blank: {SENTENCE_CONTEXT}"
                   autocomplete="off"
                   spellcheck="false">
            <span class="sentence-text">{AFTER_BLANK}</span>
        </div>
        <!-- End Sentence Template -->
    </div>
</section>

<!-- Template Variables:
{TASK_ID} - Unique identifier for the task
{TITLE} - Task title
{INSTRUCTIONS} - Task instructions
{INDEX} - Sentence number (1-based)
{BEFORE_BLANK} - Text before the blank
{CORRECT_ANSWER} - The correct answer for the blank
{SENTENCE_CONTEXT} - Full sentence with blank indicated by underscores
{AFTER_BLANK} - Text after the blank
-->

================
File: docs/templates/tasks/matching.html
================
<!-- Matching Task Template -->
<section class="task matching" data-task-type="matching" aria-labelledby="{TASK_ID}-title">
    <h2 id="{TASK_ID}-title" class="task-title">{TITLE}</h2>
    <div class="task-instructions">{INSTRUCTIONS}</div>

    <div class="pairs-container" role="application" aria-label="Matching pairs exercise">
        <div class="left-items" role="group" aria-label="Left items to match">
            <!-- Left Item Template (repeat for each item) -->
            <div class="match-item" 
                 data-index="{LEFT_INDEX}" 
                 data-pair="{PAIR_ID}" 
                 tabindex="0" 
                 role="button"
                 aria-label="Left item {LEFT_INDEX}: {LEFT_TEXT}"
                 aria-selected="false">
                {LEFT_TEXT}
            </div>
            <!-- End Left Item Template -->
        </div>

        <div class="right-items" role="group" aria-label="Right items to match">
            <!-- Right Item Template (repeat for each item) -->
            <div class="match-item" 
                 data-index="{RIGHT_INDEX}" 
                 data-pair="{PAIR_ID}" 
                 tabindex="0" 
                 role="button"
                 aria-label="Right item {RIGHT_INDEX}: {RIGHT_TEXT}"
                 aria-selected="false">
                {RIGHT_TEXT}
            </div>
            <!-- End Right Item Template -->
        </div>
    </div>

    <!-- Help text for screen readers -->
    <div class="help-text visually-hidden">
        To make a match: First select an item from the left column using Enter or Space, 
        then select its matching pair from the right column. Use arrow keys to navigate 
        between items.
    </div>
</section>

<!-- Template Variables:
{TASK_ID} - Unique identifier for the task
{TITLE} - Task title
{INSTRUCTIONS} - Task instructions
{LEFT_INDEX} - Index for left item (1-based)
{RIGHT_INDEX} - Index for right item (1-based)
{PAIR_ID} - Unique identifier for matching pair
{LEFT_TEXT} - Text for left item
{RIGHT_TEXT} - Text for right item
-->

================
File: docs/templates/tasks/multiChoice.html
================
<!-- Multiple Choice Task Template -->
<section class="task multiple-choice" data-task-type="multiChoice" aria-labelledby="{TASK_ID}-title">
    <h2 id="{TASK_ID}-title" class="task-title">{TITLE}</h2>
    <div class="task-instructions">{INSTRUCTIONS}</div>

    <div class="questions-container" role="group" aria-label="Multiple choice questions">
        <!-- Question Template (repeat for each question) -->
        <div class="question" data-index="{INDEX}" role="group" aria-labelledby="{TASK_ID}-q{INDEX}">
            <p id="{TASK_ID}-q{INDEX}" class="question-text">{QUESTION_TEXT}</p>
            
            <div class="options" role="radiogroup" aria-labelledby="{TASK_ID}-q{INDEX}">
                <!-- Option Template (repeat for each option) -->
                <label class="option">
                    <input type="radio" 
                           name="{TASK_ID}-q{INDEX}" 
                           value="{OPTION_VALUE}" 
                           data-correct="{IS_CORRECT}" 
                           aria-labelledby="{TASK_ID}-q{INDEX}-opt{OPTION_INDEX}">
                    <span id="{TASK_ID}-q{INDEX}-opt{OPTION_INDEX}" class="option-text">
                        {OPTION_TEXT}
                    </span>
                </label>
                <!-- End Option Template -->
            </div>
        </div>
        <!-- End Question Template -->
    </div>
</section>

<!-- Template Variables:
{TASK_ID} - Unique identifier for the task
{TITLE} - Task title
{INSTRUCTIONS} - Task instructions
{INDEX} - Question number (1-based)
{QUESTION_TEXT} - The question text
{OPTION_VALUE} - Value for the option
{IS_CORRECT} - "true" for correct option, omit for incorrect
{OPTION_INDEX} - Letter index for the option (a, b, c, etc.)
{OPTION_TEXT} - Text for the option
-->

================
File: docs/templates/meta.json
================
{
    "title": "[Worksheet Title]",
    "level": "[Level]",
    "category": "[Category]",
    "tags": ["tag1", "tag2"],
    "description": "[Description]",
    "objectives": [
        "[Objective 1]",
        "[Objective 2]"
    ],
    "estimatedTime": "[Time] minutes",
    "taskTypes": [
        "multiChoice",
        "fillBlanks",
        "matching",
        "dictation"
    ],
    "skillsFocus": ["skill1", "skill2"],
    "prerequisites": ["[Prerequisite 1]"],
}

================
File: docs/templates/worksheet.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[Worksheet Title] | ESL Worksheets</title>
    <!-- Only necessary CSS -->
    <link rel="stylesheet" href="../../assets/css/worksheet.css">
    <!-- Include only CSS for tasks you use -->
    <link rel="stylesheet" href="../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../assets/css/tasks/matching.css">
    <link rel="stylesheet" href="../../assets/css/tasks/dictation.css">
</head>
<body>
    <nav class="nav">
        <a href="../../index.html" class="back-btn">Back to Worksheets</a>
        <div class="progress">
            <div class="progress-bar"></div>
            <span class="progress-text">0% Complete</span>
        </div>
        <div class="level">Level: [Level]</div>
        <div class="voice">
            <label>Voice:</label>
            <select id="globalVoice"></select>
        </div>
    </nav>

    <main class="worksheet">
        <header class="header">
            <h1>[Worksheet Title]</h1>
            <div class="meta">
                <span>Level: [Level]</span>
                <span>Time: [Time] minutes</span>
                <span>Skills: [Skills]</span>
            </div>
        </header>

        <div class="tasks">
            <!-- Multiple Choice Template -->
            <section class="task multiple-choice">
                <h2>[Task Title]</h2>
                <p class="instructions">[Instructions]</p>
                
                <div class="content">
                    <div class="question">
                        <p>[Question Text]</p>
                        <div class="options">
                            <label>
                                <input type="radio" name="q1" value="1">
                                <span>[Option 1]</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="2" data-correct="true">
                                <span>[Option 2]</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="3">
                                <span>[Option 3]</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Fill in the Blanks Template -->
            <section class="task fill-blanks">
                <h2>[Task Title]</h2>
                <p class="instructions">[Instructions]</p>
                
                <div class="content">
                    <p>
                        [Text before] 
                        <input type="text" data-correct="[answer]" data-index="1">
                        [Text after]
                    </p>
                </div>
            </section>

            <!-- Matching Template -->
            <section class="task matching">
                <h2>[Task Title]</h2>
                <p class="instructions">[Instructions]</p>
                
                <div class="content">
                    <div class="pairs">
                        <div class="left">
                            <div class="item" data-pair="a">[Left Item 1]</div>
                            <div class="item" data-pair="b">[Left Item 2]</div>
                        </div>
                        <div class="right">
                            <div class="item" data-pair="b">[Right Item 2]</div>
                            <div class="item" data-pair="a">[Right Item 1]</div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Dictation Template -->
            <section class="task dictation">
                <h2>[Task Title]</h2>
                <p class="instructions">[Instructions]</p>
                
                <div class="content">
                    <div class="controls">
                        <button class="play-btn">Play</button>
                        <div class="speed-controls">
                            <button class="speed-btn" data-speed="0.75">0.75x</button>
                            <button class="speed-btn active" data-speed="1">1x</button>
                        </div>
                        <span class="attempts">Plays left: 3</span>
                    </div>
                    <textarea data-text="[Dictation Text]" data-max-attempts="3"
                              placeholder="Type what you hear..."></textarea>
                </div>
            </section>
        </div>

        <footer class="footer">
            <button type="button" id="check">Check Answers</button>
            <button type="button" id="retry">Try Again</button>
        </footer>
    </main>

    <script src="../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/b1-past-vs-perfect/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Past Simple vs Present Perfect | ESL Worksheets</title>
    <link rel="stylesheet" href="../../assets/css/worksheet.css">
    <link rel="stylesheet" href="../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../assets/css/tasks/matching.css">
</head>
<body>
    <nav class="nav">
        <a href="../../index.html" class="back-btn">Back to Worksheets</a>
        <div class="progress">
            <div class="progress-bar"></div>
            <span class="progress-text">0% Complete</span>
        </div>
        <div class="level">Level: B1</div>
        <div class="voice">
            <label>Voice:</label>
            <select id="globalVoice"></select>
        </div>
    </nav>

    <main class="worksheet">
        <header class="header">
            <h1>Past Simple vs Present Perfect</h1>
            <div class="meta">
                <span>Level: B1</span>
                <span>Time: 20 minutes</span>
                <span>Skills: Grammar</span>
            </div>
        </header>

        <div class="tasks">
            <!-- Understanding Time References -->
            <section class="task multiple-choice">
                <h2>1. Understanding Time References</h2>
                <p class="instructions">Choose the correct tense based on the time reference.</p>
                
                <div class="content">
                    <div class="question">
                        <p>Which tense should we use with "last week"?</p>
                        <div class="options">
                            <label>
                                <input type="radio" name="q1" value="1" data-correct="true">
                                <span>Past Simple</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="2">
                                <span>Present Perfect</span>
                            </label>
                        </div>
                    </div>
                    <div class="question">
                        <p>Which tense should we use with "ever"?</p>
                        <div class="options">
                            <label>
                                <input type="radio" name="q2" value="1">
                                <span>Past Simple</span>
                            </label>
                            <label>
                                <input type="radio" name="q2" value="2" data-correct="true">
                                <span>Present Perfect</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Sentence Completion -->
            <section class="task fill-blanks">
                <h2>2. Sentence Completion</h2>
                <p class="instructions">Complete the sentences using the correct form of the verbs in brackets.</p>
                
                <div class="content">
                    <p>1. I <input type="text" data-correct="have never been" data-index="1"> (never/be) to Paris.</p>
                    <p>2. She <input type="text" data-correct="visited" data-index="2"> (visit) her grandmother last Sunday.</p>
                    <p>3. They <input type="text" data-correct="have lived" data-index="3"> (live) in London since 2010.</p>
                </div>
            </section>

            <!-- Time Expression Matching -->
            <section class="task matching">
                <h2>3. Time Expression Matching</h2>
                <p class="instructions">Match each time expression with the correct tense.</p>
                
                <div class="content">
                    <div class="pairs">
                        <div class="left">
                            <div class="item" data-pair="past">yesterday</div>
                            <div class="item" data-pair="past">two days ago</div>
                            <div class="item" data-pair="perfect">since Monday</div>
                            <div class="item" data-pair="perfect">for three years</div>
                        </div>
                        <div class="right">
                            <div class="item" data-pair="past">Past Simple</div>
                            <div class="item" data-pair="past">Past Simple</div>
                            <div class="item" data-pair="perfect">Present Perfect</div>
                            <div class="item" data-pair="perfect">Present Perfect</div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <footer class="footer">
            <button type="button" id="check">Check Answers</button>
            <button type="button" id="retry">Try Again</button>
        </footer>
    </main>

    <script src="../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/b1-past-vs-perfect/meta.json
================
{
    "title": "Past Simple vs Present Perfect",
    "level": "B1",
    "category": "Grammar",
    "tags": ["grammar", "tenses", "past-simple", "present-perfect"],
    "description": "Practice when to use Past Simple and when to use Present Perfect through interactive exercises.",
    "objectives": [
        "Understand time references for each tense",
        "Use correct verb forms",
        "Identify appropriate tense based on context",
        "Master common time expressions"
    ],
    "estimatedTime": "20 minutes",
    "taskTypes": ["multiChoice", "fillBlanks", "matching"],
    "skillsFocus": ["grammar"],
    "prerequisites": ["Basic understanding of verb forms", "Knowledge of simple past and present tenses"]
}

================
File: docs/worksheets/b1-weather/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather and Seasons | ESL Worksheets</title>
    <link rel="stylesheet" href="../../assets/css/worksheet.css">
    <link rel="stylesheet" href="../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../assets/css/tasks/matching.css">
    <link rel="stylesheet" href="../../assets/css/tasks/dictation.css">
</head>
<body>
    <nav class="nav">
        <a href="../../index.html" class="back-btn">Back to Worksheets</a>
        <div class="progress">
            <div class="progress-bar"></div>
            <span class="progress-text">0% Complete</span>
        </div>
        <div class="level">Level: B1</div>
        <div class="voice">
            <label>Voice:</label>
            <select id="globalVoice"></select>
        </div>
    </nav>

    <main class="worksheet">
        <header class="header">
            <h1>Weather and Seasons</h1>
            <div class="meta">
                <span>Level: B1</span>
                <span>Time: 20 minutes</span>
                <span>Skills: Listening, Vocabulary</span>
            </div>
        </header>

        <div class="tasks">
            <!-- Vocabulary Check -->
            <section class="task multiChoice">
                <h2>1. Vocabulary Check</h2>
                <p class="instructions">Listen to each description and choose the correct weather phenomenon.</p>
                
                <div class="content">
                    <div class="question">
                        <p>What type of weather condition is being described?</p>
                        <div class="options">
                            <label>
                                <input type="radio" name="q1" value="1" data-correct="true">
                                <span>A dense fog that reduces visibility to near zero</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="2">
                                <span>Heavy rain with thunder and lightning</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="3">
                                <span>Light drizzle with occasional wind</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Weather Report -->
            <section class="task fillBlanks">
                <h2>2. Weather Report</h2>
                <p class="instructions">Complete the weather report using the words you hear.</p>
                
                <div class="content">
                    <p>Today's forecast shows 
                        <input type="text" data-correct="scattered" data-index="1"> 
                        showers in the morning, followed by 
                        <input type="text" data-correct="clear" data-index="2"> 
                        skies in the afternoon. The temperature will reach a 
                        <input type="text" data-correct="maximum" data-index="3"> 
                        of 25°C.</p>
                </div>
            </section>

            <!-- Season Matching -->
            <section class="task matching">
                <h2>3. Season Matching</h2>
                <p class="instructions">Match each season with its typical weather description.</p>
                
                <div class="content">
                    <div class="pairs">
                        <div class="left">
                            <div class="item" data-pair="spring">Spring</div>
                            <div class="item" data-pair="summer">Summer</div>
                            <div class="item" data-pair="autumn">Autumn</div>
                            <div class="item" data-pair="winter">Winter</div>
                        </div>
                        <div class="right">
                            <div class="item" data-pair="spring">Mild temperatures and occasional rain showers</div>
                            <div class="item" data-pair="summer">Hot and humid with chance of thunderstorms</div>
                            <div class="item" data-pair="autumn">Cool and windy with falling leaves</div>
                            <div class="item" data-pair="winter">Cold temperatures and possible snowfall</div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Weather Forecast Dictation -->
            <section class="task dictation">
                <h2>4. Weather Forecast Dictation</h2>
                <p class="instructions">Listen and type what you hear.</p>
                
                <div class="content">
                    <div class="controls">
                        <button class="play-btn">Play</button>
                        <div class="speed-controls">
                            <button class="speed-btn" data-speed="0.75">0.75x</button>
                            <button class="speed-btn active" data-speed="1">1x</button>
                        </div>
                        <span class="attempts">Plays left: 3</span>
                    </div>
                    <textarea data-text="Tomorrow will bring partly cloudy conditions with a gentle breeze. Expect temperatures to range between 18 and 23 degrees Celsius." 
                              data-max-attempts="3"
                              placeholder="Type what you hear..."></textarea>
                </div>
            </section>
        </div>

        <footer class="footer">
            <button type="button" id="check">Check Answers</button>
            <button type="button" id="retry">Try Again</button>
        </footer>
    </main>

    <script src="../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/b1-weather/meta.json
================
{
    "title": "Weather and Seasons",
    "level": "B1",
    "category": "Listening",
    "tags": ["weather", "seasons", "vocabulary", "listening"],
    "description": "Practice weather-related vocabulary and listening comprehension through various interactive tasks.",
    "objectives": [
        "Understand weather-related vocabulary",
        "Practice listening comprehension",
        "Identify weather phenomena",
        "Write weather descriptions from dictation"
    ],
    "estimatedTime": "20 minutes",
    "taskTypes": ["multiChoice", "fillBlanks", "matching", "dictation"],
    "skillsFocus": ["listening", "vocabulary"],
    "prerequisites": ["Basic weather vocabulary"]
}

================
File: docs/worksheets/debug/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debug Worksheet | ESL Worksheets</title>
    <!-- CSS Load Debug -->
    <style>
        /* Debug Styles */
        .debug-info {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 10px;
            margin: 10px 0;
            font-family: monospace;
            white-space: pre-wrap;
        }
        .debug-box {
            outline: 2px dashed red;
            position: relative;
        }
        .debug-box::before {
            content: attr(data-debug);
            position: absolute;
            top: -20px;
            left: 0;
            background: red;
            color: white;
            padding: 2px 5px;
            font-size: 12px;
            font-family: monospace;
        }
        .debug-css {
            outline: 2px dashed blue;
            position: relative;
        }
        .debug-css::after {
            content: attr(data-css);
            position: absolute;
            bottom: -20px;
            right: 0;
            background: blue;
            color: white;
            padding: 2px 5px;
            font-size: 12px;
            font-family: monospace;
        }
    </style>
    <!-- Core CSS -->
    <link rel="stylesheet" href="../../assets/css/base.css">
    <link rel="stylesheet" href="../../assets/css/layout.css">
    <link rel="stylesheet" href="../../assets/css/components.css">
    <link rel="stylesheet" href="../../assets/css/tasks/base-task.css">
    <!-- Task CSS -->
    <link rel="stylesheet" href="../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../assets/css/tasks/matching.css">
    <link rel="stylesheet" href="../../assets/css/tasks/dictation.css">
</head>
<body>
    <!-- CSS Variables Debug Display -->
    <div class="debug-info" id="cssVarsDebug">Loading CSS variables...</div>
    
    <!-- Standard Navigation -->
    <nav class="worksheet-nav debug-box" data-debug="nav:worksheet-nav" role="navigation" aria-label="Worksheet navigation">
        <div class="nav-container debug-box" data-debug="div:nav-container">
            <a href="../../index.html" class="nav-home btn btn-outline debug-css" data-css="btn, btn-outline" aria-label="Back to worksheets hub">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                <span>Back to Worksheets</span>
            </a>

            <div class="nav-progress debug-box" data-debug="div:nav-progress" role="progressbar" aria-label="Worksheet progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <div class="progress debug-css" data-css="progress">
                    <div class="progress-bar debug-css" data-css="progress-bar" style="width: 0%"></div>
                </div>
                <span class="progress-text debug-css" data-css="progress-text">0% Complete</span>
            </div>

            <div class="nav-level debug-box" data-debug="div:nav-level">
                <span class="level-label debug-css" data-css="level-label">Level:</span>
                <span class="level-value debug-css" data-css="level-value">Debug</span>
            </div>

            <div class="voice-control debug-box" data-debug="div:voice-control">
                <label for="globalVoice" class="voice-label debug-css" data-css="voice-label">Voice:</label>
                <select id="globalVoice" class="voice-select debug-css" data-css="voice-select" aria-label="Select voice for audio playback"></select>
            </div>
        </div>
    </nav>

    <main id="main-content" class="worksheet debug-box" data-debug="main:worksheet" role="main">
        <!-- Multiple Choice Task Debug -->
        <section class="task-container debug-box" data-debug="section:task-container[multiChoice]" data-task-type="multiChoice">
            <h2 class="task-title debug-css" data-css="task-title">Multiple Choice Debug</h2>
            <div class="task-instructions debug-css" data-css="task-instructions">Choose the correct answer to test styling.</div>

            <div class="task-content debug-box" data-debug="div:task-content">
                <div class="task-item debug-box" data-debug="div:task-item" data-index="1">
                    <p class="question-text debug-css" data-css="question-text">What type of class is 'debug-box'?</p>
                    <div class="options debug-box" data-debug="div:options">
                        <label class="option debug-css" data-css="option">
                            <input type="radio" name="q1" value="1">
                            <span class="option-text">Regular class</span>
                        </label>
                        <label class="option debug-css" data-css="option">
                            <input type="radio" name="q1" value="2" data-correct="true">
                            <span class="option-text">Debug class</span>
                        </label>
                    </div>
                </div>
            </div>
        </section>

        <!-- Fill in the Blanks Task Debug -->
        <section class="task-container debug-box" data-debug="section:task-container[fillBlanks]" data-task-type="fillBlanks">
            <h2 class="task-title debug-css" data-css="task-title">Fill in the Blanks Debug</h2>
            <div class="task-instructions debug-css" data-css="task-instructions">Complete the sentence to test input styling.</div>

            <div class="task-content debug-box" data-debug="div:task-content">
                <div class="task-item debug-box" data-debug="div:task-item">
                    <div class="sentence debug-css" data-css="sentence">
                        <span class="sentence-text debug-css" data-css="sentence-text">This is a </span>
                        <input type="text" 
                               class="blank-input debug-css" 
                               data-css="blank-input"
                               data-correct="debug" 
                               data-index="1"
                               aria-label="Fill in: This is a ___ test"
                               autocomplete="off"
                               spellcheck="false">
                        <span class="sentence-text debug-css" data-css="sentence-text"> test.</span>
                    </div>
                </div>
            </div>
        </section>

        <!-- Matching Task Debug -->
        <section class="task-container debug-box" data-debug="section:task-container[matching]" data-task-type="matching">
            <h2 class="task-title debug-css" data-css="task-title">Matching Debug</h2>
            <div class="task-instructions debug-css" data-css="task-instructions">Match items to test connection styling.</div>

            <div class="task-content debug-box" data-debug="div:task-content">
                <div class="pairs-container debug-box" data-debug="div:pairs-container">
                    <div class="left-items debug-box" data-debug="div:left-items">
                        <div class="task-item debug-css" data-css="task-item" data-pair="debug">Debug</div>
                        <div class="task-item debug-css" data-css="task-item" data-pair="test">Test</div>
                    </div>
                    <div class="right-items debug-box" data-debug="div:right-items">
                        <div class="task-item debug-css" data-css="task-item" data-pair="test">Testing</div>
                        <div class="task-item debug-css" data-css="task-item" data-pair="debug">Debugging</div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Dictation Task Debug -->
        <section class="task-container debug-box" data-debug="section:task-container[dictation]" data-task-type="dictation">
            <h2 class="task-title debug-css" data-css="task-title">Dictation Debug</h2>
            <div class="task-instructions debug-css" data-css="task-instructions">Type what you hear to test audio controls.</div>

            <div class="task-content debug-box" data-debug="div:task-content">
                <div class="dictation-task debug-box" data-debug="div:dictation-task" 
                     data-text="This is a debug test." 
                     data-max-attempts="3">
                    <div class="dictation-controls debug-box" data-debug="div:dictation-controls">
                        <div class="play-control debug-css" data-css="play-control">
                            <button type="button" class="play-button debug-css" data-css="play-button">Play</button>
                            <span class="attempts debug-css" data-css="attempts">Plays left: 3</span>
                        </div>
                        <div class="speed-control debug-css" data-css="speed-control">
                            <button type="button" class="speed-button debug-css" data-css="speed-button" data-speed="0.75">0.75x</button>
                            <button type="button" class="speed-button active debug-css" data-css="speed-button active" data-speed="1">1x</button>
                        </div>
                    </div>
                    <textarea class="dictation-input debug-css" 
                              data-css="dictation-input"
                              rows="3"
                              placeholder="Type what you hear..."
                              aria-label="Dictation input"></textarea>
                </div>
            </div>
        </section>

        <footer class="worksheet-footer debug-box" data-debug="footer:worksheet-footer">
            <div class="button-group debug-box" data-debug="div:button-group">
                <button type="button" id="check" class="btn btn-primary debug-css" data-css="btn btn-primary">Check Answers</button>
                <button type="button" id="retry" class="btn btn-secondary debug-css" data-css="btn btn-secondary">Try Again</button>
            </div>
            <div aria-live="polite" class="feedback-region visually-hidden"></div>
        </footer>
    </main>

    <script>
    // Debug Script to display CSS variables
    window.addEventListener('DOMContentLoaded', () => {
        const debugInfo = document.getElementById('cssVarsDebug');
        const styles = getComputedStyle(document.documentElement);
        const cssVars = {};

        // Collect all CSS variables
        for (let i = 0; i < styles.length; i++) {
            const prop = styles[i];
            if (prop.startsWith('--')) {
                cssVars[prop] = styles.getPropertyValue(prop);
            }
        }

        // Display CSS variables
        debugInfo.textContent = 'CSS Variables:\n' + 
            JSON.stringify(cssVars, null, 2);

        // Add computed style info to debug-css elements
        document.querySelectorAll('.debug-css').forEach(el => {
            const styles = window.getComputedStyle(el);
            const important = [
                'color', 'background-color', 'border', 'margin', 
                'padding', 'font-size', 'font-family'
            ];
            const computedStyles = {};
            important.forEach(prop => {
                computedStyles[prop] = styles.getPropertyValue(prop);
            });
            el.title = JSON.stringify(computedStyles, null, 2);
        });
    });
    </script>

    <script src="../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/debug/meta.json
================
{
    "title": "Debug Worksheet",
    "level": "Debug",
    "category": "Development",
    "tags": ["debug", "development", "testing"],
    "description": "A worksheet designed to debug styling and functionality of all task types.",
    "objectives": [
        "Debug task container styling",
        "Verify CSS variable inheritance",
        "Test task component layouts",
        "Validate interactive elements"
    ],
    "estimatedTime": "5 minutes",
    "taskTypes": ["multiChoice", "fillBlanks", "matching", "dictation"],
    "skillsFocus": ["development"],
    "prerequisites": ["None"]
}

================
File: docs/worksheets/examples/basic/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic Example | ESL Worksheets</title>
    <link rel="stylesheet" href="../../../assets/css/base.css">
    <link rel="stylesheet" href="../../../assets/css/layout.css">
    <link rel="stylesheet" href="../../../assets/css/components.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/base-task.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/matching.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/dictation.css">
</head>
<body>
    <a href="#main-content" class="visually-hidden focus-visible">Skip to main content</a>

    <nav class="worksheet-nav" role="navigation" aria-label="Worksheet navigation">
        <div class="nav-container">
            <a href="../../../index.html" class="nav-home btn btn-outline" aria-label="Back to worksheets hub">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                <span>Back to Worksheets</span>
            </a>

            <div class="nav-progress" role="progressbar" aria-label="Worksheet progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <div class="progress">
                    <div class="progress-bar" style="width: 0%"></div>
                </div>
                <span class="progress-text">0% Complete</span>
            </div>

            <div class="nav-level">
                <span class="level-label">Level:</span>
                <span class="level-value">Example</span>
            </div>

            <div class="voice-control">
                <label for="globalVoice" class="voice-label">Voice:</label>
                <select id="globalVoice" class="voice-select" aria-label="Select voice for audio playback"></select>
            </div>
        </div>
    </nav>

    <main id="main-content" class="worksheet" role="main">
        <header class="worksheet-header">
            <h1 class="worksheet-title">Example Worksheet</h1>
            
            <div class="worksheet-meta">
                <span class="meta-item">
                    <span class="meta-label">Level:</span>
                    <span class="meta-value">Example</span>
                </span>
                <span class="meta-item">
                    <span class="meta-label">Time:</span>
                    <span class="meta-value">10 minutes</span>
                </span>
                <span class="meta-item">
                    <span class="meta-label">Skills:</span>
                    <span class="meta-value">Mixed</span>
                </span>
            </div>
        </header>

        <div class="worksheet-content">
            <!-- Multiple Choice Example -->
            <section class="task-container" data-task-type="multiChoice">
                <h2 class="task-title">1. Multiple Choice Example</h2>
                <div class="task-instructions">Choose the best option.</div>

                <div class="task-content">
                    <div class="task-item" data-index="1">
                        <p class="question-text">Which word is an adjective?</p>
                        <div class="options">
                            <label class="option">
                                <input type="radio" name="q1" value="1">
                                <span class="option-text">run</span>
                            </label>
                            <label class="option">
                                <input type="radio" name="q1" value="2" data-correct="true">
                                <span class="option-text">happy</span>
                            </label>
                            <label class="option">
                                <input type="radio" name="q1" value="3">
                                <span class="option-text">book</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Fill in the Blanks Example -->
            <section class="task-container" data-task-type="fillBlanks">
                <h2 class="task-title">2. Fill in the Blanks Example</h2>
                <div class="task-instructions">Complete the sentence.</div>

                <div class="task-content">
                    <div class="task-item">
                        <div class="sentence">
                            <span class="sentence-text">The sky is </span>
                            <input type="text" 
                                   class="blank-input" 
                                   data-correct="blue" 
                                   data-index="1"
                                   aria-label="Fill in: The sky is ___"
                                   autocomplete="off"
                                   spellcheck="false">
                            <span class="sentence-text"> and the grass is green.</span>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Matching Example -->
            <section class="task-container" data-task-type="matching">
                <h2 class="task-title">3. Matching Example</h2>
                <div class="task-instructions">Match the opposites.</div>

                <div class="task-content">
                    <div class="pairs-container">
                        <div class="left-items">
                            <div class="task-item" data-pair="a">hot</div>
                            <div class="task-item" data-pair="b">big</div>
                        </div>
                        <div class="right-items">
                            <div class="task-item" data-pair="a">cold</div>
                            <div class="task-item" data-pair="b">small</div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Dictation Example -->
            <section class="task-container" data-task-type="dictation">
                <h2 class="task-title">4. Dictation Example</h2>
                <div class="task-instructions">Listen and type what you hear.</div>

                <div class="task-content">
                    <div class="dictation-task" 
                         data-text="This is a simple example sentence." 
                         data-max-attempts="3">
                        <div class="dictation-controls">
                            <div class="play-control">
                                <button type="button" class="play-button">Play</button>
                                <span class="attempts">Plays left: 3</span>
                            </div>
                            <div class="speed-control">
                                <button type="button" class="speed-button" data-speed="0.75">0.75x</button>
                                <button type="button" class="speed-button active" data-speed="1">1x</button>
                            </div>
                        </div>
                        <textarea class="dictation-input" 
                                 rows="3"
                                 placeholder="Type what you hear..."
                                 aria-label="Dictation input"></textarea>
                    </div>
                </div>
            </section>
        </div>

        <footer class="worksheet-footer">
            <div class="button-group">
                <button type="button" id="check" class="btn btn-primary">
                    Check Answers
                </button>
                <button type="button" id="retry" class="btn btn-secondary">
                    Try Again
                </button>
            </div>
            <div aria-live="polite" class="feedback-region visually-hidden"></div>
        </footer>
    </main>

    <script src="../../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/examples/basic/meta.json
================
{
    "title": "Basic Example",
    "level": "Example",
    "category": "Mixed",
    "tags": ["example", "demo", "all-tasks"],
    "description": "An example worksheet demonstrating all available task types with proper styling.",
    "objectives": [
        "Demonstrate multiple choice tasks",
        "Show fill in the blanks usage",
        "Present matching exercises",
        "Illustrate dictation functionality"
    ],
    "estimatedTime": "10 minutes",
    "taskTypes": ["multiChoice", "fillBlanks", "matching", "dictation"],
    "skillsFocus": ["mixed"],
    "prerequisites": ["None"]
}

================
File: docs/worksheets/examples/minimal/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minimal Example | ESL Worksheets</title>
    <link rel="stylesheet" href="../../../assets/css/base.css">
    <link rel="stylesheet" href="../../../assets/css/layout.css">
    <link rel="stylesheet" href="../../../assets/css/components.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/base-task.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/multiChoice.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/fillBlanks.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/matching.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/dictation.css">
</head>
<body>
    <a href="#main-content" class="visually-hidden focus-visible">Skip to main content</a>

    <nav class="worksheet-nav" role="navigation" aria-label="Worksheet navigation">
        <div class="nav-container">
            <a href="../../../index.html" class="nav-home btn btn-outline" aria-label="Back to worksheets hub">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                <span>Back to Worksheets</span>
            </a>

            <div class="nav-progress" role="progressbar" aria-label="Worksheet progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <div class="progress">
                    <div class="progress-bar" style="width: 0%"></div>
                </div>
                <span class="progress-text">0% Complete</span>
            </div>

            <div class="nav-level">
                <span class="level-label">Level:</span>
                <span class="level-value">Mixed</span>
            </div>

            <div class="voice-control">
                <label for="globalVoice" class="voice-label">Voice:</label>
                <select id="globalVoice" class="voice-select" aria-label="Select voice for audio playback"></select>
            </div>
        </div>
    </nav>

    <main id="main-content" class="worksheet" role="main">
        <header class="worksheet-header">
            <h1 class="worksheet-title">Task Type Examples</h1>
            
            <div class="worksheet-meta">
                <span class="meta-item">
                    <span class="meta-label">Level:</span>
                    <span class="meta-value">Mixed</span>
                </span>
                <span class="meta-item">
                    <span class="meta-label">Time:</span>
                    <span class="meta-value">5 minutes</span>
                </span>
                <span class="meta-item">
                    <span class="meta-label">Skills:</span>
                    <span class="meta-value">Mixed</span>
                </span>
            </div>
        </header>

        <div class="worksheet-content">
            <!-- Multiple Choice -->
            <section class="task-container" data-task-type="multiChoice">
                <h2 class="task-title">1. Multiple Choice</h2>
                <div class="task-instructions">Choose the correct answer.</div>
                <div class="task-content">
                    <div class="task-item" data-index="1">
                        <p class="question-text">What is the capital of France?</p>
                        <div class="options">
                            <label class="option">
                                <input type="radio" name="q1" value="1">
                                <span class="option-text">London</span>
                            </label>
                            <label class="option">
                                <input type="radio" name="q1" value="2" data-correct="true">
                                <span class="option-text">Paris</span>
                            </label>
                            <label class="option">
                                <input type="radio" name="q1" value="3">
                                <span class="option-text">Berlin</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Fill in the Blanks -->
            <section class="task-container" data-task-type="fillBlanks">
                <h2 class="task-title">2. Fill in the Blank</h2>
                <div class="task-instructions">Complete the sentence.</div>
                <div class="task-content">
                    <div class="task-item">
                        <div class="sentence">
                            <span class="sentence-text">The Earth goes around the </span>
                            <input type="text" 
                                   class="blank-input" 
                                   data-correct="sun" 
                                   data-index="1"
                                   aria-label="Fill in: The Earth goes around the ___"
                                   autocomplete="off"
                                   spellcheck="false">
                            <span class="sentence-text">.</span>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Matching -->
            <section class="task-container" data-task-type="matching">
                <h2 class="task-title">3. Matching</h2>
                <div class="task-instructions">Match the numbers with their words.</div>
                <div class="task-content">
                    <div class="pairs-container">
                        <div class="left-items">
                            <div class="task-item" data-pair="one">1</div>
                            <div class="task-item" data-pair="two">2</div>
                        </div>
                        <div class="right-items">
                            <div class="task-item" data-pair="one">one</div>
                            <div class="task-item" data-pair="two">two</div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Dictation -->
            <section class="task-container" data-task-type="dictation">
                <h2 class="task-title">4. Dictation</h2>
                <div class="task-instructions">Listen and type what you hear.</div>
                <div class="task-content">
                    <div class="dictation-task" 
                         data-text="Today is a beautiful day." 
                         data-max-attempts="3">
                        <div class="dictation-controls">
                            <div class="play-control">
                                <button type="button" class="play-button">Play</button>
                                <span class="attempts">Plays left: 3</span>
                            </div>
                            <div class="speed-control">
                                <button type="button" class="speed-button" data-speed="0.75">0.75x</button>
                                <button type="button" class="speed-button active" data-speed="1">1x</button>
                            </div>
                        </div>
                        <textarea class="dictation-input" 
                                 rows="3"
                                 placeholder="Type what you hear..."
                                 aria-label="Dictation input"></textarea>
                    </div>
                </div>
            </section>
        </div>

        <footer class="worksheet-footer">
            <div class="button-group">
                <button type="button" id="check" class="btn btn-primary">Check Answers</button>
                <button type="button" id="retry" class="btn btn-secondary">Try Again</button>
            </div>
            <div aria-live="polite" class="feedback-region visually-hidden"></div>
        </footer>
    </main>

    <script src="../../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/worksheets/examples/minimal/meta.json
================
{
    "title": "Task Type Examples",
    "level": "Mixed",
    "category": "Examples",
    "tags": ["example", "minimal", "task-types"],
    "description": "One example of each task type to demonstrate basic functionality.",
    "objectives": [
        "Show multiple choice functionality",
        "Demonstrate fill in the blanks",
        "Present matching mechanism",
        "Show dictation system"
    ],
    "estimatedTime": "5 minutes",
    "taskTypes": ["multiChoice", "fillBlanks", "matching", "dictation"],
    "skillsFocus": ["mixed"],
    "prerequisites": ["None"]
}

================
File: docs/worksheets/tests/css-test/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Inheritance Test | ESL Worksheets</title>
    <link rel="stylesheet" href="../../../assets/css/base.css">
    <link rel="stylesheet" href="../../../assets/css/layout.css">
    <link rel="stylesheet" href="../../../assets/css/components.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/base-task.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/multiChoice.css">
</head>
<body>
    <main id="main-content" class="worksheet" role="main">
        <!-- Test Case 1: Full Class Chain -->
        <section class="task task-container multiple-choice" data-task-type="multiChoice">
            <h2 class="task-title">Test 1: Full Class Chain</h2>
            <div class="task-instructions">This task has all recommended classes.</div>
            <div class="task-content">
                <div class="task-item multiple-choice-item" data-index="1">
                    <p class="question-text">Test question with complete class chain?</p>
                    <div class="options">
                        <label class="option">
                            <input type="radio" name="q1" value="1">
                            <span class="option-text">Test option 1</span>
                        </label>
                        <label class="option">
                            <input type="radio" name="q1" value="2" data-correct="true">
                            <span class="option-text">Test option 2</span>
                        </label>
                    </div>
                </div>
            </div>
        </section>

        <!-- Test Case 2: Current Implementation -->
        <section class="task-container" data-task-type="multiChoice">
            <h2 class="task-title">Test 2: Current Implementation</h2>
            <div class="task-instructions">This task uses current class structure.</div>
            <div class="task-content">
                <div class="task-item" data-index="1">
                    <p class="question-text">Test question with basic classes?</p>
                    <div class="options">
                        <label class="option">
                            <input type="radio" name="q2" value="1">
                            <span class="option-text">Test option 1</span>
                        </label>
                        <label class="option">
                            <input type="radio" name="q2" value="2" data-correct="true">
                            <span class="option-text">Test option 2</span>
                        </label>
                    </div>
                </div>
            </div>
        </section>

        <!-- Test Case 3: Minimal with Debug Info -->
        <style>
            .debug-info {
                font-family: monospace;
                background: #f8f9fa;
                padding: 1rem;
                margin: 1rem 0;
                border: 1px solid #dee2e6;
                white-space: pre-wrap;
            }
            #cssVarsTest span {
                display: block;
                margin: 0.25rem 0;
            }
            #cssVarsTest .var-name {
                color: #0066cc;
            }
            #cssVarsTest .var-value {
                color: #006600;
                margin-left: 1rem;
            }
        </style>

        <!-- Test Variables Output -->
        <div id="cssVarsTest" class="debug-info">
            <h3>CSS Variable Test</h3>
        </div>

        <div class="debug-info">
            <h3>Computed Styles Test</h3>
            <div id="computedStylesTest"></div>
        </div>
    </main>

    <script>
    window.addEventListener('DOMContentLoaded', () => {
        // Test CSS Variables
        const cssVarsTest = document.getElementById('cssVarsTest');
        const computedStylesTest = document.getElementById('computedStylesTest');
        const testElements = [
            '.task.task-container.multiple-choice',
            '.task-container',
            '.task-item.multiple-choice-item',
            '.task-item'
        ];

        // Get all CSS variables
        const rootStyles = getComputedStyle(document.documentElement);
        const vars = Array.from(rootStyles).filter(prop => prop.startsWith('--'));
        vars.forEach(varName => {
            const value = rootStyles.getPropertyValue(varName);
            cssVarsTest.innerHTML += `<span><span class="var-name">${varName}:</span><span class="var-value">${value}</span></span>`;
        });

        // Test computed styles
        testElements.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                const styles = getComputedStyle(element);
                const important = ['background', 'border', 'padding', 'margin', 'color'];
                computedStylesTest.innerHTML += `<h4>${selector}</h4>`;
                important.forEach(prop => {
                    computedStylesTest.innerHTML += `<span>${prop}: ${styles.getPropertyValue(prop)}</span><br>`;
                });
                computedStylesTest.innerHTML += '<hr>';
            }
        });
    });
    </script>
</body>
</html>

================
File: docs/worksheets/tests/css-test/meta.json
================
{
    "title": "CSS Inheritance Test",
    "level": "Test",
    "category": "Development",
    "tags": ["test", "css", "development"],
    "description": "Test case for CSS inheritance and variable application.",
    "objectives": [
        "Test CSS variable inheritance",
        "Verify class chain functionality",
        "Compare different class structures"
    ],
    "estimatedTime": "5 minutes",
    "taskTypes": ["multiChoice"],
    "skillsFocus": ["development"],
    "prerequisites": ["None"]
}

================
File: docs/worksheets/tests/simple-css/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple CSS Test | ESL Worksheets</title>
    <link rel="stylesheet" href="../../../assets/css/worksheet.css">
    <link rel="stylesheet" href="../../../assets/css/tasks/multiChoice.css">
</head>
<body>
    <nav class="nav">
        <a href="../../../index.html" class="back-btn">
            Back to Worksheets
        </a>
        <div class="progress">
            <div class="progress-bar"></div>
            <span class="progress-text">0% Complete</span>
        </div>
        <div class="level">Level: B1</div>
        <div class="voice">
            <label>Voice:</label>
            <select id="globalVoice"></select>
        </div>
    </nav>

    <main class="worksheet">
        <header class="header">
            <h1>Simple CSS Test</h1>
            <div class="meta">
                <span>Level: B1</span>
                <span>Time: 10 minutes</span>
                <span>Skills: Grammar</span>
            </div>
        </header>

        <div class="tasks">
            <!-- Multiple Choice Task -->
            <section class="task multiple-choice">
                <h2>Multiple Choice</h2>
                <p class="instructions">Choose the correct answer.</p>
                
                <div class="content">
                    <div class="question">
                        <p>The sky is ___.</p>
                        <div class="options">
                            <label>
                                <input type="radio" name="q1" value="1">
                                <span>red</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="2" data-correct="true">
                                <span>blue</span>
                            </label>
                            <label>
                                <input type="radio" name="q1" value="3">
                                <span>green</span>
                            </label>
                        </div>
                    </div>
                </div>
            </section>

        </div>

        <footer class="footer">
            <button type="button" id="check">Check Answers</button>
            <button type="button" id="retry">Try Again</button>
        </footer>
    </main>

    <script src="../../../assets/js/worksheetManager.js" type="module"></script>
</body>
</html>

================
File: docs/_config.yml
================
title: Documentation
description: Project documentation powered by GitHub Pages
theme: jekyll-theme-cayman

================
File: docs/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESL Interactive Worksheets</title>
    <link rel="stylesheet" href="assets/css/base.css">
    <link rel="stylesheet" href="assets/css/layout.css">
    <link rel="stylesheet" href="assets/css/hub.css">
    <link rel="stylesheet" href="assets/css/components.css">
</head>
<body>
    <div class="container">
        <header class="site-header">
            <h1>ESL Interactive Worksheets</h1>
            
            <div class="level-filter">
                <button data-level="a1">A1</button>
                <button data-level="a2">A2</button>
                <button data-level="b1" class="active">B1</button>
                <button data-level="b2">B2</button>
                <button data-level="c1">C1</button>
            </div>

            <div class="skill-filter">
                <button data-skill="grammar">Grammar</button>
                <button data-skill="vocabulary">Vocabulary</button>
                <button data-skill="reading">Reading</button>
                <button data-skill="listening" class="active">Listening</button>
                <button data-skill="writing">Writing</button>
                <button data-skill="speaking">Speaking</button>
            </div>

            <div class="search-container">
                <input type="text" id="search" class="search-input" placeholder="Search worksheets...">
            </div>
        </header>

        <main>
            <div class="worksheet-grid">
                <!-- Weather and Seasons Worksheet -->
                <a href="worksheets/b1-weather/index.html" class="worksheet-card" data-level="b1" data-skills="listening vocabulary">
                    <h2>Weather and Seasons</h2>
                    <div class="worksheet-meta">
                        <span class="level">B1</span>
                        <span class="time">20 min</span>
                        <span class="skills">Listening, Vocabulary</span>
                    </div>
                    <p class="worksheet-description">
                        Practice weather-related vocabulary and listening comprehension through various interactive exercises including dictation.
                    </p>
                    <div class="worksheet-tags">
                        <span class="worksheet-tag">Multiple Choice</span>
                        <span class="worksheet-tag">Fill in Blanks</span>
                        <span class="worksheet-tag">Matching</span>
                        <span class="worksheet-tag">Dictation</span>
                    </div>
                </a>

                <!-- Existing Past vs Perfect Worksheet -->
                <a href="worksheets/b1-past-vs-perfect/index.html" class="worksheet-card" data-level="b1" data-skills="grammar">
                    <h2>Past Simple vs Present Perfect</h2>
                    <div class="worksheet-meta">
                        <span class="level">B1</span>
                        <span class="time">20 min</span>
                        <span class="skills">Grammar</span>
                    </div>
                    <p class="worksheet-description">
                        Practice when to use Past Simple and when to use Present Perfect with interactive exercises.
                    </p>
                    <div class="worksheet-tags">
                        <span class="worksheet-tag">Multiple Choice</span>
                        <span class="worksheet-tag">Fill in Blanks</span>
                        <span class="worksheet-tag">Matching</span>
                    </div>
                </a>
            </div>
        </main>

        <footer class="site-footer">
            <div class="footer-content">
                <nav class="footer-nav">
                    <a href="#">About</a>
                    <a href="#">Contact</a>
                    <a href="#">Privacy Policy</a>
                </nav>
                <p>&copy; 2024 ESL Interactive Worksheets. All rights reserved.</p>
            </div>
        </footer>
    </div>

    <script>
        // Filter and search functionality
        document.querySelectorAll('.level-filter button, .skill-filter button').forEach(button => {
            button.addEventListener('click', () => {
                // Toggle active state within button group
                const group = button.parentElement.querySelectorAll('button');
                group.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                applyFilters();
            });
        });

        document.getElementById('search').addEventListener('input', applyFilters);

        function applyFilters() {
            const activeLevel = document.querySelector('.level-filter button.active').dataset.level;
            const activeSkill = document.querySelector('.skill-filter button.active').dataset.skill;
            const searchText = document.getElementById('search').value.toLowerCase();

            document.querySelectorAll('.worksheet-card').forEach(card => {
                const matchesLevel = card.dataset.level === activeLevel;
                const matchesSkill = card.dataset.skills.includes(activeSkill);
                const matchesSearch = !searchText || 
                    card.textContent.toLowerCase().includes(searchText);

                card.style.display = 
                    matchesLevel && matchesSkill && matchesSearch ? 'block' : 'none';
            });
        }
    </script>
</body>
</html>

================
File: README.md
================
# MCP Docs Example

Documentation website using GitHub Pages

## Getting Started

This repository is set up for GitHub Pages documentation.

### Local Development

1. Clone the repository:
   ```bash
   git clone https://github.com/xRoyBatty/mcp-docs-example.git
   cd mcp-docs-example
   ```

2. Create and activate a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

## Documentation

Documentation is powered by GitHub Pages. Visit [MCP Docs Example Documentation](https://xRoyBatty.github.io/mcp-docs-example/)
